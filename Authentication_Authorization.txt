Authentication:
    Authentication is the verification of who you are. For example, let’s say you’ve gone to a concert.
    At the front door, the security guard asks to see your ticket and ID in order to verify that the name on your ID matches the name on your ticket. This is an example of authentication.
    Authentication relies on one or more factors to verify identity, and these factors come in three main types:
    Knowledge is something you know, like a username and password.
    Possession is something you have, like a security card or mobile device
    Inherence is something you are, which generally refers to biometric data such as fingerprints.
    (There are additional factors, such as location and time, that can be used to complement existing factors, but are generally not suitable for authentication on their own)
    Authentication that relies on a single factor, such as a simple username/password combo, is called Single-Factor Authentication, and is becoming increasingly insecure.

    Authentication is about proving identity through one or more factors, but how does the proof actually work? Most methods for authentication use the concept of challenges and responses. 
    This pattern can be found everywhere you look, from password-based authentication on websites to verification codes sent to your phone to physical locks that require a key or combination to unlock.
    Responses to authentication prompts can be categorized into:
        Knowledge-Based: “Something You Know”
        Possession-Based: “Something You Have”
        Inherence-Based: “Something You Are”

Authorization:
    Authorization is the verification of what you are allowed to do. Returning to our concert example, once the security guard has authenticated you, you then give your ticket to a different security guard who then only allows you to pass into General Admissions (instead of the VIP section).
    This is an example of authorization.
    Authorization is very important for web security, and it is responsible for everything from preventing users from modifying each other’s accounts, to protecting back-end assets from attackers, to granting limited access to external services.
    Good authorization will allow you to limit users and services to the privileges they require; just because a user is authorized to manage one group doesn’t mean they should be able to manage all groups, for example.

Encryption:
    Symmetric encryption uses the same key to encrypt and decrypt data.
    Asymmetric encryption uses separate keys for encryption and decryption.

PKI: Authenticating the Authenticator
    Most authentication relies on the ability to transmit secrets securely. How can you be sure you’re sending your precious credentials to the right place? 
    If you’re logging into a website with a password, you need to be sure you’re actually interacting with the real website, and not a malicious fake.
    Public-Key Infrastructure, or PKI, solves this problem. PKI is a system that designates trusted authorities who verify that you’re interacting with who you think you are.
    You’re making use of PKI right now to connect to this website; HTTPS relies on PKI to make it harder for malicious actors to create fake copies of websites.

Single Sign-On & OAuth2:
    The most recent advancement in authentication is Single Sign-On, also known as SSO. If you’ve ever used the ‘Sign in with Google/Facebook/Etc’ buttons on websites, you’ve used SSO.
    In fact, Codecademy lets you use SSO to log in.
    With SSO, you authenticate with one service yourself, then use that service to authenticate with other services, but those services never actually have access to the secrets you use to authenticate. This makes it just as secure, if not more, than creating a password for the website itself.
    The current standard for SSO is OAuth 2.0, the protocol that powers the ‘Sign in with…’ buttons.